% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_RDM.R
\name{rdmDynamic}
\alias{rdmDynamic}
\title{\subsection{SM: RDM dynamic with DCT for slow waves}{RDM_B parameterization with s=1 scaling (B = b-A done in rdm.R)Added q0 parameter for initial rates in RL version. Note that this is the SAME code as RLARD except for the p_types :-/ that should be easier!

#' RL-RD with RDM as model
#'
#' @return
#' @export
#'
#' @examples
rdmDynamicDCT3 <- function() {list(
type="RACE",
p_types=c("v","B","A","t0","s",
"alpha1", "alpha2", "alpha3",
"alpha1min", "alpha2min", "alpha3min",
"q01", "q02", "q03",
"weight1", "weight2", "weight3",
paste0(rep('vcos', 10), 1:10),    # effect on DRIFT
paste0(rep('Bcos', 10), 1:10)     # effect on THRESHOLD
),  # maximally 10 cosines, should really be enough
}}
\usage{
rdmDynamic()
}
\description{

}
\section{Trial dependent parameter transform}{



}

\section{p_vector transform}{
transform = function(x) x,

transform = function(x) x,
}

\section{Random function for racing accumulators}{
rfun=function(lR,pars) rRDM(lR,pars),

rfun=function(lR,pars) rRDM(lR,pars),
}

\section{Density function (PDF) for single accumulator}{
dfun=function(rt,pars) dRDM(rt,pars),

dfun=function(rt,pars) dRDM(rt,pars),
}

\section{Probability function (CDF) for single accumulator}{
pfun=function(rt,pars) pRDM(rt,pars),

pfun=function(rt,pars) pRDM(rt,pars),
}

\section{Race likelihood combining pfun and dfun}{



}

\section{RDM_B parameterization with s=1 scaling (B = b-A done in rdm.R)}{





}

\section{Added q0 parameter for initial rates in RL version. Note that this is the \emph{SAME} code as RLARD except for the p_types :-/ that should be easier!}{


#' RL-RD with RDM as model
#'
#' @return
#' @export
#'
#' @examples
generateRDMdynamic <- function(p_types, constantsFixed=NULL,
probit_scale=c('alpha1', "alpha2", "alpha3", "q01", "q02", "q03"),
logit_scale=c("v", "B", "A", "t0", "s")) {
model <- rdmDynamicDCT3()
model$p_types <- p_types
model <- model\link{names(model)!='Ntransform'}
model$Ntransform=function(x,
constants=constantsFixed,
probit_scale_ = probit_scale,
logit_scale_ = logit_scale) {
if(!is.null(constants)) {
for(nm in names(constants)) {
x <- cbind(x, nm=constants[\link{nm}])
colnames(x)\link{ncol(x)} <- nm
}
}
# Transform to natural scale
# probit_scale=c('alpha1', "alpha2", "alpha3", "q01", "q02", "q03")
# logit_scale = c("v", "B", "A", "t0", "s")

\if{html}{\out{<div class="sourceCode">}}\preformatted{pnames <- dimnames(x)[[2]]
## weights on normal scale?
x[,pnames \%in\% logit_scale_] <- exp(x[,pnames \%in\% logit_scale_])
if(any(pnames \%in\% probit_scale_)) \{
  x[,pnames \%in\% probit_scale_] <- pnorm(x[,pnames \%in\% probit_scale_])
\}

# scale alphas to set range [alphamin, 1]
if('alpha1min' \%in\% pnames) x[,pnames == 'alpha1'] <- x[,pnames == 'alpha1']*(1-x[,pnames == 'alpha1min']) + x[,pnames == 'alpha1min']
if('alpha2min' \%in\% pnames) x[,pnames == 'alpha2'] <- x[,pnames == 'alpha2']*(1-x[,pnames == 'alpha2min']) + x[,pnames == 'alpha2min']
if('alpha3min' \%in\% pnames) x[,pnames == 'alpha3'] <- x[,pnames == 'alpha3']*(1-x[,pnames == 'alpha3min']) + x[,pnames == 'alpha3min']

#
if('alpha1Posmin' \%in\% pnames) x[,pnames == 'alpha1Pos'] <- x[,pnames == 'alpha1Pos']*(1-x[,pnames == 'alpha1Posmin']) + x[,pnames == 'alpha1Posmin']
if('alpha2Posmin' \%in\% pnames) x[,pnames == 'alpha2Pos'] <- x[,pnames == 'alpha2Pos']*(1-x[,pnames == 'alpha2Posmin']) + x[,pnames == 'alpha2Posmin']
if('alpha3Posmin' \%in\% pnames) x[,pnames == 'alpha3Pos'] <- x[,pnames == 'alpha3Pos']*(1-x[,pnames == 'alpha3Posmin']) + x[,pnames == 'alpha3Posmin']
if('alpha1Negmin' \%in\% pnames) x[,pnames == 'alpha1Neg'] <- x[,pnames == 'alpha1Neg']*(1-x[,pnames == 'alpha1Negmin']) + x[,pnames == 'alpha1Negmin']
if('alpha2Negmin' \%in\% pnames) x[,pnames == 'alpha2Neg'] <- x[,pnames == 'alpha2Neg']*(1-x[,pnames == 'alpha2Negmin']) + x[,pnames == 'alpha2Negmin']
if('alpha3Negmin' \%in\% pnames) x[,pnames == 'alpha3Neg'] <- x[,pnames == 'alpha3Neg']*(1-x[,pnames == 'alpha3Negmin']) + x[,pnames == 'alpha3Negmin']

x
}\if{html}{\out{</div>}}

}

f <- function() return(model)
environment(f) <- list2env(list(constantsFixed=constantsFixed, model=model,probit_scale=probit_scale, logit_scale=logit_scale), parent = globalenv())   # empty environment
return(f)
}
\subsection{SM: Generate RDM dynamic with DCT for slow waves}{
}

#' RL-RD with RDM as model
#'
#' @return
#' @export
#'
#' @examples
generateRDMdynamic2 <- function(p_types, constantsFixed=NULL,
probit_scale=c('alpha1', "alpha2", "alpha3", "q01", "q02", "q03"),
logit_scale=c("v", "B", "A", "t0", "s")) {
model <- rdmDynamicDCT4()
model$p_types <- p_types
model <- model\link{names(model)!='Ntransform'}
model$Ntransform=function(x,
constants=constantsFixed,
probit_scale_ = probit_scale,
logit_scale_ = logit_scale) {
if(!is.null(constants)) {
for(nm in names(constants)) {
x <- cbind(x, nm=constants[\link{nm}])
colnames(x)\link{ncol(x)} <- nm
}
}
# Transform to natural scale
# probit_scale=c('alpha1', "alpha2", "alpha3", "q01", "q02", "q03")
# logit_scale = c("v", "B", "A", "t0", "s")

\if{html}{\out{<div class="sourceCode">}}\preformatted{pnames <- dimnames(x)[[2]]
## weights on normal scale?
x[,pnames \%in\% logit_scale_] <- exp(x[,pnames \%in\% logit_scale_])
if(any(pnames \%in\% probit_scale_)) \{
  x[,pnames \%in\% probit_scale_] <- pnorm(x[,pnames \%in\% probit_scale_])
\}

# scale alphas to set range [alphamin, 1]
if('alpha1min' \%in\% pnames) x[,pnames == 'alpha1'] <- x[,pnames == 'alpha1']*(1-x[,pnames == 'alpha1min']) + x[,pnames == 'alpha1min']
if('alpha2min' \%in\% pnames) x[,pnames == 'alpha2'] <- x[,pnames == 'alpha2']*(1-x[,pnames == 'alpha2min']) + x[,pnames == 'alpha2min']
if('alpha3min' \%in\% pnames) x[,pnames == 'alpha3'] <- x[,pnames == 'alpha3']*(1-x[,pnames == 'alpha3min']) + x[,pnames == 'alpha3min']

#
if('alpha1Posmin' \%in\% pnames) x[,pnames == 'alpha1Pos'] <- x[,pnames == 'alpha1Pos']*(1-x[,pnames == 'alpha1Posmin']) + x[,pnames == 'alpha1Posmin']
if('alpha2Posmin' \%in\% pnames) x[,pnames == 'alpha2Pos'] <- x[,pnames == 'alpha2Pos']*(1-x[,pnames == 'alpha2Posmin']) + x[,pnames == 'alpha2Posmin']
if('alpha3Posmin' \%in\% pnames) x[,pnames == 'alpha3Pos'] <- x[,pnames == 'alpha3Pos']*(1-x[,pnames == 'alpha3Posmin']) + x[,pnames == 'alpha3Posmin']
if('alpha1Negmin' \%in\% pnames) x[,pnames == 'alpha1Neg'] <- x[,pnames == 'alpha1Neg']*(1-x[,pnames == 'alpha1Negmin']) + x[,pnames == 'alpha1Negmin']
if('alpha2Negmin' \%in\% pnames) x[,pnames == 'alpha2Neg'] <- x[,pnames == 'alpha2Neg']*(1-x[,pnames == 'alpha2Negmin']) + x[,pnames == 'alpha2Negmin']
if('alpha3Negmin' \%in\% pnames) x[,pnames == 'alpha3Neg'] <- x[,pnames == 'alpha3Neg']*(1-x[,pnames == 'alpha3Negmin']) + x[,pnames == 'alpha3Negmin']

x
}\if{html}{\out{</div>}}

}

f <- function() return(model)
environment(f) <- list2env(list(constantsFixed=constantsFixed, model=model,probit_scale=probit_scale, logit_scale=logit_scale), parent = globalenv())   # empty environment
return(f)
}

RL-RD with RDM as model
}

